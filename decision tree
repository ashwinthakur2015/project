Decision Tree - Train and Visualize
Prediction using Decision Tree Algorithm
● Create the Decision Tree classifier and visualize it graphically.

● The purpose is if we feed any new data to this classifier, it would be able to predict the right class accordingly.

Import Libraries:
import pandas as pd

from sklearn.externals.six import StringIO
from sklearn.tree import DecisionTreeClassifier, export_graphviz

import pydotplus
import graphviz

import matplotlib.image as mpimg
import matplotlib.pyplot as plt
%matplotlib inline
Iris Data Set:
Load the csv file and define the input and output variables

#define the column names for the pandas dataframe
column_names = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'iris_class']

#load the csv file into a new pandas dataframe
iris_df = pd.read_csv('iris_data.csv', names = column_names, header = None)

#Load the input variables into X
X = iris_df[['sepal_length', 'sepal_width', 'petal_length', 'petal_width']].values

#Load the output variable into y
y = iris_df['iris_class'].values
Modelling:
Model the data using Desision Tree Classification model

#Create an instance of the decision tree classifier
dec_tree = DecisionTreeClassifier(criterion="entropy")

#Fit the model with the training data X_train and y_train
dec_tree.fit(X, y)
DecisionTreeClassifier(class_weight=None, criterion='entropy', max_depth=None,
            max_features=None, max_leaf_nodes=None,
            min_impurity_decrease=0.0, min_impurity_split=None,
            min_samples_leaf=1, min_samples_split=2,
            min_weight_fraction_leaf=0.0, presort=False, random_state=None,
            splitter='best')
Visualization:
Visualize the Decision Tree.

#initialize a StringIO class
dot_data = StringIO()

#file name to save the image
filename = "iris_flower_tree.png"

feature_names = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width'] #input values
class_names = ['Iris Setosa', 'Iris Versicolour', 'Iris Virginica'] #output values

#convert the decision tree model into dot data
out = export_graphviz(dec_tree,
                      feature_names=feature_names,
                      out_file=dot_data,
                      class_names=class_names,
                      filled=True,
                      special_characters=True,
                      rotate=False)

#convert the dot data into a graph
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())

#save the graph
graph.write_png(filename)

#open and plot the graph
img = mpimg.imread(filename)
plt.figure(figsize=(100, 200))
plt.imshow(img, interpolation='nearest');
